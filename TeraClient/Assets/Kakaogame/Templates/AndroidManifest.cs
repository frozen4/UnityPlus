﻿// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

#if PLATFORM_KAKAO
namespace Kakaogame.SDK.Editor {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class AndroidManifest : AndroidManifestBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            this.Write("\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"");
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture( "com.kakaogame.sdk" ));
            
            
            this.Write("\"\n    android:versionCode=\"1\"\n    android:versionName=\"0.0.0\" >\n\n");
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture( permissions.TransformText() ));
            
            
            this.Write("\n\t<application>\n\t\t<!-- KakaoGameSDK Invite Start -->\n\t\t <receiver\n\t\t\t android:name=\"com.kakaogame.invite.KGInstallReferrerReceiver\"\n\t\t\t android:exported=\"true\" >\n\t\t\t <intent-filter>\n\t\t\t <action android:name=\"com.android.vending.INSTALL_REFERRER\" />\n\t\t\t </intent-filter>\n\t\t\t ");
            
            
 for (int i = 0; i < receiverNames.Count; i++) { 
            
            
            this.Write("\t\t\t <meta-data android:name=\"");
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture( receiverNames[i] ));
            
            
            this.Write("\" android:value=\"");
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture( receiverValues[i] ));
            
            
            this.Write("\"/>\n\t\t\t ");
            
            
 } 
            
            
            this.Write("\t\t</receiver>\n\t\t <!-- KakaoGameSDK Invite End -->\n\t\t<activity\n            android:name=\"com.kakaogame.KGAuthActivity\"\n            android:configChanges=\"keyboard|keyboardHidden|screenLayout|screenSize|orientation\"\n            android:theme=\"@android:style/Theme.Translucent.NoTitleBar\" />\n\n");
            
            
 if(platforms.Contains("kakaogameshop")) { 
            
            
            this.Write("\t\t<activity android:name=\"com.kakao.gameshop.sdk.KakaoPaymentActivity\"\n          android:launchMode=\"singleTop\"\n          android:windowSoftInputMode=\"adjustResize\"\n          android:screenOrientation=\"portrait\"/>\n \t\t<activity android:name=\"com.kakao.gameshop.sdk.KakaoPaymentListActivity\"\n          android:windowSoftInputMode=\"adjustResize\"\n          android:launchMode=\"singleTop\"\n          android:screenOrientation=\"portrait\"/>\n\n \t\t<activity android:name=\"com.kakao.gameshop.sdk.ResultOfBankaActivity\"\n                  android:launchMode=\"singleTask\">\n    \t\t<intent-filter>\n        \t\t<data android:scheme=\"kakaogameshop20150801\" android:host=\"success_order\" />\n        \t\t<data android:scheme=\"kakaogameshop20150801\" android:host=\"cancel_order\" />\n        \t\t<action android:name=\"android.intent.action.VIEW\" />\n        \t\t<category android:name=\"android.intent.category.BROWSABLE\" />\n        \t\t<category android:name=\"android.intent.category.DEFAULT\" />\n    \t\t</intent-filter>\n\t\t</activity>\n");
            
            
 } 
            
            
            this.Write("\n");
            
            
 if(platforms.Contains("kakao;")) { 
            
            
            this.Write("\t\t\t");
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture( kakao.TransformText() ));
            
            
            this.Write("\n");
            
            
 } 
            
            
 if(platforms.Contains("google")) { 
            
            
            this.Write("\t\t\t");
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture( google.TransformText() ));
            
            
            this.Write("\n");
            
            
 } 
            
            
 if(platforms.Contains("facebook")) { 
            
            
            this.Write("\t\t\t");
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture( facebook.TransformText() ));
            
            
            this.Write("\n");
            
            
 } 
            
            
 if(platforms.Contains("push")) { 
            
            
            this.Write("\t\t\t");
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture( push.TransformText() ));
            
            
            this.Write("\n");
            
            
 } 
            
            
 if(platforms.Contains("push") == false && platforms.Contains("google")) { 
            
            
            this.Write("<!-- KakaoGameSDK Google Start -->\n<meta-data\n\tandroid:name=\"com.google.android.gms.version\"\n\tandroid:value=\"@integer/google_play_services_version\" />\n<!-- KakaoGameSDK Google End -->\n");
            
            
 } 
            
            
            this.Write("\t</application>\n\n</manifest>");
            
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class AndroidManifestBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError());
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError();
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
#endif
